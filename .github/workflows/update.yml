name: Update Game Data

on:
  workflow_dispatch:
  schedule:
    - cron: "0 17 * * *"  # 台灣 01:00

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # 讓後面 git push 有權限

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests pillow

      - name: Create scripts (in-memory)
        shell: bash
        run: |
          mkdir -p scripts data
          # 若沒有機制對照檔，先建表頭
          if [ ! -f data/mechanism_map_zh.csv ]; then
            printf 'bgg_mechanism_en,mechanism_zh\n' > data/mechanism_map_zh.csv
          fi

          # --- fetch_bgg.py ---
          cat <<'PY' > scripts/fetch_bgg.py
          import requests, time, json, xml.etree.ElementTree as ET
          from pathlib import Path

          INPUT = Path("data/bgg_ids.json")
          OUTPUT = Path("data/bgg_data.json")
          API_BASE = "https://boardgamegeek.com/xmlapi2/thing?stats=1&versions=1&id="
          BATCH = 20

          def fetch_batch(ids):
              url = API_BASE + ",".join(str(i) for i in ids)
              r = requests.get(url, timeout=60)
              while r.status_code == 202:
                  time.sleep(2)
                  r = requests.get(url, timeout=60)
              r.raise_for_status()
              return ET.fromstring(r.text)

          def parse_items(root):
              out=[]
              for item in root.findall("item"):
                  try:
                      bid=int(item.get("id"))
                  except:
                      continue
                  name_en=None
                  for n in item.findall("name"):
                      if n.get("type")=="primary":
                          name_en=n.get("value"); break
                  def val(tag, attr="value"):
                      el=item.find(tag)
                      return el.get(attr) if el is not None and el.get(attr) is not None else None
                  avgw=item.find("statistics/ratings/averageweight")
                  weight=float(avgw.get("value")) if avgw is not None and avgw.get("value") not in (None,"NaN") else None
                  image_el=item.find("image"); thumb_el=item.find("thumbnail")
                  image_url=image_el.text if image_el is not None else None
                  thumb_url=thumb_el.text if thumb_el is not None else None
                  categories=[l.get("value") for l in item.findall("link[@type='boardgamecategory']")]
                  mechanics=[l.get("value") for l in item.findall("link[@type='boardgamemechanic']")]
                  versions_el=item.find("versions")
                  versions_count=len(versions_el.findall("item")) if versions_el is not None else 0
                  out.append({
                      "bgg_id": bid,
                      "name_en": name_en,
                      "year": int(val("yearpublished")) if val("yearpublished") else None,
                      "players": [int(val("minplayers")) if val("minplayers") else None,
                                  int(val("maxplayers")) if val("maxplayers") else None],
                      "time_min": int(val("minplaytime")) if val("minplaytime") else None,
                      "time_max": int(val("maxplaytime")) if val("maxplaytime") else None,
                      "weight": weight,
                      "categories": categories,
                      "mechanics": mechanics,
                      "image_url": image_url or thumb_url,
                      "thumb_url": thumb_url or image_url,
                      "versions_count": versions_count,
                  })
              return out

          def main():
              if not INPUT.exists():
                  print("No data/bgg_ids.json; nothing to fetch."); return
              base_rows=json.loads(INPUT.read_text(encoding="utf-8"))
              by_id,ids={},[]
              for r in base_rows:
                  bid=r.get("bgg_id")
                  if not bid: continue
                  bid=int(bid); ids.append(bid); by_id[bid]=r
              results=[]
              for i in range(0,len(ids),BATCH):
                  chunk=ids[i:i+BATCH]
                  try:
                      root=fetch_batch(chunk)
                      parsed=parse_items(root)
                      for p in parsed:
                          src=by_id.get(int(p["bgg_id"]),{})
                          results.append({**src,**p})
                  except Exception as e:
                      print(f"Batch {chunk} failed: {e}")
                  time.sleep(3)
              OUTPUT.parent.mkdir(parents=True, exist_ok=True)
              OUTPUT.write_text(json.dumps(results, ensure_ascii=False, indent=2), encoding="utf-8")
              print(f"Fetched {len(results)} entries → {OUTPUT}")
          if __name__ == "__main__": main()
          PY

          # --- apply_taxonomy_and_price.py ---
          cat <<'PY' > scripts/apply_taxonomy_and_price.py
          import csv, json
          from pathlib import Path

          MANUAL_CSV=Path("data/manual.csv")
          BGG_IN=Path("data/bgg_data.json")
          BGG_OUT=BGG_IN
          CATMAP_CSV=Path("data/category_map_zh.csv")
          MECHMAP_CSV=Path("data/mechanism_map_zh.csv")

          def _int_or_none(x):
              if x is None: return None
              s=str(x).strip()
              if s=="" or s.lower()=="none": return None
              try: return int(float(s))
              except: return None

          def load_manual():
              d={}
              if not MANUAL_CSV.exists(): return d
              with MANUAL_CSV.open(encoding="utf-8-sig") as f:
                  r=csv.DictReader(f)
                  for row in r:
                      key=str(row.get("bgg_id") or row.get("name_zh") or row.get("bgg_query"))
                      if not key: continue
                      row["manual_override"]=int(row.get("manual_override") or 0)
                      row["price_msrp_twd"]=_int_or_none(row.get("price_msrp_twd"))
                      row["price_twd"]=_int_or_none(row.get("price_twd"))
                      row["used_price_twd"]=_int_or_none(row.get("used_price_twd"))
                      row["stock"]=_int_or_none(row.get("stock"))
                      if row.get("image_version_id") is not None:
                          row["image_version_id"]=str(row["image_version_id"]).strip()
                      d[key]=row
              return d

          def load_map(csv_path, key_en, key_zh):
              m={}
              if not csv_path.exists(): return m
              with csv_path.open(encoding="utf-8-sig") as f:
                  r=csv.DictReader(f)
                  for row in r:
                      en=(row.get(key_en) or "").strip()
                      zh=(row.get(key_zh) or "").strip()
                      if en: m[en]=zh or en
              return m

          def main():
              if not BGG_IN.exists():
                  print("No data/bgg_data.json; skip apply."); return
              manual=load_manual()
              catmap=load_map(CATMAP_CSV,"bgg_category_en","category_zh")
              mechmap=load_map(MECHMAP_CSV,"bgg_mechanism_en","mechanism_zh")
              rows=json.loads(BGG_IN.read_text(encoding="utf-8"))
              out=[]
              for r in rows:
                  # 合併 manual 欄位（bgg_id > name_zh > bgg_query）
                  m=None
                  for k in [str(r.get("bgg_id") or ""), str(r.get("name_zh") or ""), str(r.get("bgg_query") or "")]:
                      if k and k in manual: m=manual[k]; break
                  if m:
                      for fld in ["name_zh","name_en_override","alias_zh","category_zh","price_msrp_twd",
                                  "price_twd","used_price_twd","price_note","used_note","manual_override",
                                  "stock","description","image_override","image_version_id"]:
                          if fld in m and m[fld] not in (None,""):
                              r[fld]=m[fld]

                  # 中文分類
                  if r.get("category_zh"):
                      r["categories_zh"]=[x.strip() for x in str(r["category_zh"]).replace("；",";").replace("/", ";").split(";") if x.strip()]
                  else:
                      en=r.get("categories") or []
                      r["categories_zh"]=[catmap.get(x,x) for x in en]

                  # 機制中文
                  mechs=r.get("mechanics") or []
                  r["mechanics_zh"]=[mechmap.get(x,x) for x in mechs]

                  # 別名
                  if r.get("alias_zh"):
                      r["aliases_zh"]=[x.strip() for x in str(r["alias_zh"]).split(";") if x.strip()]
                  out.append(r)

              BGG_OUT.write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")
              print(f"apply_taxonomy_and_price: total {len(out)}; categories_zh & mechanics_zh applied.")
          if __name__ == "__main__": main()
          PY

          # --- fetch_version_image.py ---
          cat <<'PY' > scripts/fetch_version_image.py
          import json, time, requests, xml.etree.ElementTree as ET
          from pathlib import Path

          INOUT = Path("data/bgg_data.json")
          API = "https://boardgamegeek.com/xmlapi2/thing?type=boardgameversion&id="

          def fetch_version(v_id:int):
              url = API + str(v_id)
              r = requests.get(url, timeout=60)
              while r.status_code == 202:
                  time.sleep(2); r = requests.get(url, timeout=60)
              r.raise_for_status()
              root = ET.fromstring(r.text)
              it = root.find("item")
              if it is None: return None
              img = it.find("image"); thumb = it.find("thumbnail")
              return (img.text if img is not None else None) or (thumb.text if thumb is not None else None)

          def main():
              if not INOUT.exists():
                  print("No data/bgg_data.json; skip."); return
              rows = json.loads(INOUT.read_text(encoding="utf-8"))
              changed = False
              for r in rows:
                  v = (r.get("image_version_id") or "").strip() if r.get("image_version_id") is not None else ""
                  if not v:
                      continue
                  try:
                      vid = int(v)
                  except:
                      print(f"Skip invalid image_version_id: {v}"); continue
                  try:
                      url = fetch_version(vid)
                      if url:
                          r["image_url"] = url
                          r["image_version_used"] = vid
                          changed = True
                          print(f"Using version {vid} image for bgg_id={r.get('bgg_id')}")
                      else:
                          print(f"No image for version {vid}")
                  except Exception as e:
                      print(f"Version fetch failed {vid}: {e}")
              if changed:
                  INOUT.write_text(json.dumps(rows, ensure_ascii=False, indent=2), encoding="utf-8")
                  print("fetch_version_image: updated data/bgg_data.json")
              else:
                  print("fetch_version_image: no change")
          if __name__ == "__main__": main()
          PY

          # --- make_mechanism_map.py ---
          cat <<'PY' > scripts/make_mechanism_map.py
          import csv, json
          from pathlib import Path
          BGG = Path("data/bgg_data.json")
          MAP = Path("data/mechanism_map_zh.csv")
          OUT = Path("data/mechanism_map_candidates.csv")
          SEED = {
            "Action Points":"行動點","Area Majority / Influence":"區域控制","Area Movement":"區域移動",
            "Auction / Bidding":"競標","Bag Building":"布袋構築","Campaign / Battle Card Driven":"戰役/卡驅動",
            "Card Drafting":"選牌","Card Play Conflict Resolution":"出牌解衝突","Cooperative Game":"合作",
            "Contracts":"合約","Deck Construction":"牌庫構築","Dice Rolling":"擲骰","End Game Bonuses":"終局加分",
            "Grid Movement":"格子移動","Hand Management":"手牌管理","Hidden Movement":"隱藏移動",
            "Line Drawing":"連線","Loans":"借貸","Memory":"記憶","Modular Board":"模組地圖",
            "Movement Points":"移動點","Network and Route Building":"路網建設","Negotiation":"談判",
            "Open Drafting":"公開選牌","Ownership":"所有權","Pattern Recognition":"圖形辨識",
            "Pick-up and Deliver":"取貨運送","Press Your Luck":"拚運氣","Rock-Paper-Scissors":"剪刀石頭布",
            "Role Playing":"角色扮演","Scenario / Mission / Campaign Game":"劇本/任務/戰役",
            "Set Collection":"收集套組","Simultaneous Action Selection":"同時選擇行動",
            "Solo / Solitaire Game":"單人","Square Grid":"方格","Take That":"互害",
            "Tile Placement":"板塊擺放","Trading":"交易","Trick-taking":"吃墩",
            "Turn Order: Claim Action":"搶先手","Variable Phase Order":"可變階段順序",
            "Variable Player Powers":"角色能力","Variable Set-up":"可變設置",
            "Worker Placement":"工人放置","Worker Placement with Dice Workers":"骰子工人"
          }
          def load_cur_map():
              m={}
              if MAP.exists():
                  with MAP.open(encoding="utf-8-sig") as f:
                      r=csv.DictReader(f)
                      for row in r:
                          en=(row.get("bgg_mechanism_en") or "").strip()
                          zh=(row.get("mechanism_zh") or "").strip()
                          if en: m[en]=zh
              return m
          def main():
              if not BGG.exists():
                  print("no data/bgg_data.json; skip"); return
              rows=json.loads(BGG.read_text(encoding="utf-8"))
              found=set()
              for r in rows:
                  for m in (r.get("mechanics") or []):
                      if m: found.add(m)
              cur = load_cur_map()
              all_mechs=sorted(found)
              OUT.parent.mkdir(parents=True, exist_ok=True)
              with OUT.open("w", encoding="utf-8", newline="") as f:
                  w=csv.writer(f); w.writerow(["bgg_mechanism_en","mechanism_zh"])
                  for en in all_mechs:
                      w.writerow([en, cur.get(en) or SEED.get(en) or ""])
              print(f"Collected {len(all_mechs)} unique mechanics → {OUT}")
          if __name__=="__main__": main()
          PY

          # --- build_json.py（新版，穩定唯一 id + 聰明去重） ---
          cat <<'PY' > scripts/build_json.py
          import json, datetime, hashlib
          from pathlib import Path

          INPUT  = Path("data/bgg_data.json")
          OUTPUT = Path("data/games_full.json")

          def slugify(s: str) -> str:
              return (s or "").strip().lower().replace(" ", "_")

          if not INPUT.exists():
              print("No data/bgg_data.json; skip build_json.")
              raise SystemExit(0)

          rows   = json.loads(INPUT.read_text(encoding="utf-8"))
          items  = []
          today  = datetime.date.today().isoformat()

          # 規則：用 名稱/版本/override/bgg_id 組穩定 id
          def make_item_id(name_en, name_zh, bid, r):
              base = slugify(name_en or name_zh or (f"bgg_{bid}" if bid else "game"))
              ver = r.get("image_version_id") or r.get("image_version_used")
              if ver:
                  return f"{base}-v{str(ver).strip()}"
              if r.get("image_override"):
                  suffix = hashlib.md5(r["image_override"].encode("utf-8")).hexdigest()[:8]
                  return f"{base}-{suffix}"
              if bid:
                  return f"{base}-{bid}"
              return base

          # 聰明去重：只有完全相同條件再重複，才加 -2、-3...
          _seen = {}  # {item_id: {"sigs": set(), "dup": 1}}
          def ensure_unique(item_id: str, signature: tuple) -> str:
              bucket = _seen.setdefault(item_id, {"sigs": set(), "dup": 1})
              if signature in bucket["sigs"]:
                  bucket["dup"] += 1
                  return f"{item_id}-{bucket['dup']}"
              else:
                  bucket["sigs"].add(signature)
                  return item_id

          for r in rows:
              bid      = r.get("bgg_id")
              name_en  = r.get("name_en_override") or r.get("name_en") or r.get("bgg_query")
              name_zh  = r.get("name_zh")
              base_id  = make_item_id(name_en, name_zh, bid, r)

              signature = (
                  bid,
                  r.get("image_version_id"),
                  r.get("image_version_used"),
                  r.get("image_override"),
              )
              final_id = ensure_unique(base_id, signature)

              item = dict(r)
              item["id"] = final_id
              item["name_en"] = name_en or ""
              item["name_zh"] = name_zh or ""
              item["updated_at"] = today

              if bid and not item.get("bgg_url"):
                  item["bgg_url"] = f"https://boardgamegeek.com/boardgame/{bid}"
              if not item.get("search_keywords"):
                  kws = []
                  if item["name_zh"]: kws.append(f"{item['name_zh']} BGG")
                  if item["name_en"]: kws.append(f"{item['name_en']} BGG")
                  item["search_keywords"] = kws
              if not item.get("image"):
                  item["image"] = item.get("image_url") or item.get("thumb_url")

              items.append(item)

          items.sort(key=lambda x: (x.get("name_zh") or x.get("name_en") or "").lower())

          OUTPUT.parent.mkdir(parents=True, exist_ok=True)
          OUTPUT.write_text(json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")
          print(f"Built {len(items)} entries → {OUTPUT}")
          PY

      - name: Run scripts
        run: |
          python scripts/resolve_bgg.py
          python scripts/fetch_bgg.py
          python scripts/apply_taxonomy_and_price.py
          python scripts/make_mechanism_map.py
          python scripts/fetch_version_image.py
          python scripts/download_images.py
          python scripts/build_json.py

      - name: Commit changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/games_full.json data/bgg_data.json data/bgg_ids.json || true
          git add data/mechanism_map_zh.csv data/mechanism_map_candidates.csv || true
          git add assets/img/* || true
          git commit -m "Auto-update game data" || echo "No changes to commit"
          git push || echo "No changes to push"
